Data Definition Language (DDL)
The SQL DDL category provides commands for defining, deleting and modifying tables in a database.
Use the following commands in this category.

CREATE Command

Purpose: To create the database or tables inside the database
Syntax to create a table with three columns:
{
CREATE TABLE table_name (column_name1 datatype(size), column_name2 datatype(size),
 column_name3 datatype(size));

 }


DROP Command

Purpose: To delete a database or a table inside the database.
Syntax to drop a table:
{
DROP TABLE table_name;
}

ALTER Command

Purpose: To change the structure of the tables in the database such as changing the name of a table,
adding a primary key to a table, or adding or deleting a column in a table.
1. Syntax to add a column into a table:

{
ALTER TABLE table_name ADD (column_name datatype(size));
}

2. Syntax to add a primary key to a table:


{
ALTER TABLE table_name ADD primary key (column_name);
}


TRUNCATE Command

Purpose: To remove all records from a table, which will empty the table but not delete the table itself.

Syntax to truncate a table:
{
TRUNCATE TABLE table_name;
}


COMMENT Command

Purpose: To add comments to explain or document SQL statements by using double dash (--) at the start of the line.
Any text after the double dash will not be executed as part of the SQL statement.
These comments are not there to build the database. They are only for your own use.

Syntax to COMMENT a line in SQL:

--Retrieve all data from a table
SELECT * FROM table_name; 


Data Query Language (DQL)

The SQL DQL commands provide the ability to query and retrieve data from the database.
Use the following command in this category.

SELECT Command

Purpose: To retrieve data from tables in the database.
Syntax to select data from a table:

{
SELECT * FROM table_name;
}


Data Manipulation Language (DML)
The SQL DML commands provide the ability to query, delete and update data in the database.
Use the following commands in this category.

INSERT Command

Purpose: To add records of data into an existing table.
Syntax to insert data into three columns in a table:

{
INSERT INTO table_name (column1, column2, column3) VALUES (value1, value2, value3);
}

UPDATE Command

Purpose: To modify or update data contained within a table in the database.
Syntax to update data in two columns:
{
UPDATE table_name SET column1 = value1, column2 = value2 WHERE condition;
}

DELETE Command

Purpose: To delete data from a table in the database.
Syntax to delete data:

{
DELETE FROM table_name WHERE condition;
}


Data Control Language (DCL)
You use DCL to deal with the rights and permissions of users of a database system.
You can execute SQL commands to perform different types of operations such as create and drop tables.
To do this, you need to have user rights set up. This is called user privileges.
This category deals with advanced functions or operations in the database.
Note that this category can have a generic description of the two main commands.
Use the following commands in this category:

GRANT Command to provide the user of the database
with the privileges required to allow users to access and manipulate the database.

REVOKE Command to remove permissions from any user.

Transaction Control Language (TCL)
The TCL commands are used to manage transactions in the database.
 These are used to manage the changes made to the data in a table by utilizing the DML commands.
 It also allows SQL statements to be grouped together into logical transactions.
 This category deals with advanced functions or operations in a database.
 Note that this category can have a generic description of the two main commands.
 Use the following commands in this category:

COMMIT Command to save all the work you have already done in the database.
ROLLBACK Command to restore a database to the last committed state.



What are key constraints?
In every table there should be one or more columns or fields that can be used to fetch data from tables.
In other words, a primary key.
The key constraint specifies that there should be a column, or columns, in a tablethat can be used to fetch data for any row.
This key attribute or primary key should never be NULL or the same for two different rows of data.
For example, in the student table I can use the student ID to fetch data for each of the students.
No value of student ID is null, and it is unique for every row, hence it can be the key attribute.

What are domain constraints?
Domain constraints refer to the rules defined for the values that can be stored for a certain column.
 For instance, you cannot store the home address of a student in the first name column.
 Similarly, a contact number cannot exceed ten digits.

What are referential integrity constraints?
When a table is related to another table via a foreign key column,
then the referenced column value must exist in the other table.
This means, according to the student and department examples,
that values should exist in the student ID column in the student table because the two tables are related via the student ID column.


for creating table :

CREATE TABLE customers
   CREATE TABLE customers
    (CustomerId INT, 
    FirstName VARCHAR(40), 
    LastName VARCHAR(20), 
    Company VARCHAR(80), 
    Address VARCHAR(70), 
    City VARCHAR(40),
    State VARCHAR(40), 
    Country VARCHAR(40), 
    PostalCode VARCHAR(10), 
    Phone VARCHAR(24), 
    Fax VARCHAR(24), 
    Email VARCHAR(60), 
    SupportRapid INT );


INSERT INTO 'customers' ('customerID', 'customerName', 'customerAddress') VALUES
(1, 'Jack', '115 Old street Belfast'),
(2, 'James', '24 Carlson Rd London'),
(4, 'Maria', '5 Fredrik Rd, Bedford'),
(5, 'Jade', '10 Copland Ave Portsmouth '),
(6, 'Yasmine', '15 Fredrik Rd, Bedford'),
(3, 'Jimmy', '110 Copland Ave Portsmouth');