Using the addition operator:

SELECT column_name1 + column_name2 FROM table_name;

SELECT salary + allowance FROM employee;

SELECT * FROM employee
WHERE salary + allowance = 25000;

SELECT column_name1 - column_name2 FROM table_name;

SELECT salary - tax FROM employee;

SELECT * FROM employee
WHERE salary - tax = 50000;

SELECT *
FROM employee
WHERE tax * 2 = 4000;

SELECT allowance / salary * 100 FROM employee;


SELECT column_name1 % column_name2 FROM table_name;

SELECT hours % 2 FROM employee;

SELECT * FROM employee
WHERE hours % 2 = 0;





Operator:


=
Checks for equality

<>  or !=
Checks for not inequality

>
Check if something is greater than

>=
Check if something is greater than or equal

<
Check if something is less than

<=
Check if something is less than or equal


SELECT * FROM employee WHERE employee_id = 1;

SELECT * FROM employee WHERE employee_name = 'James';

SELECT *
FROM employee
WHERE salary <> 24000;

SELECT *
FROM employee
WHERE salary > 50000;

SELECT *
FROM employee
WHERE tax >= 1000;

SELECT *
FROM employee
WHERE allowance < 2500;

SELECT *
FROM employee
WHERE hours <= 10;


Types of ordering / sorting:

SELECT *
FROM Employee
ORDER BY <order by column name>;

Sorting by a single column:

SELECT *
FROM customers
ORDER BY CustomerId DESC;

SELECT *
FROM customers
ORDER BY City;

SELECT *
FROM customers
ORDER BY City DESC;

 SELECT *
FROM invoices
ORDER BY InvoiceDate;

SELECT *
FROM invoices
ORDER BY InvoiceDate DESC;

Ordering by multiple columns:

SELECT *
FROM invoices
ORDER BY BillingCity ASC, InvoiceDate DESC;


Operator

Description

ALL


Used to compare a single value to all the values in another value set.

AND


Allows for the existence of multiple conditions in an SQL statement's WHERE clause.

ANY


Used to compare a value to any applicable value in the list as per the condition.

BETWEEN


Used to search for values that are within a set of values, given the minimum value and the maximum value.

EXISTS


Used to search for the presence of a row in a specified table that meets a certain criterion.

IN


Used to compare a value to a list of literal values that have been specified.

LIKE


Used to compare a value to similar values using wildcard operators.

NOT


Reverses the meaning of the logical operator with which it is used. For example: NOT EXISTS, NOT BETWEEN, NOT IN, etc.â€¯This is a negate operator.

OR


Used to combine multiple conditions in an SQL statement's WHERE clause.

IS NULL


Used to compare a value with a NULL value.

UNIQUE


Searches every row of a specified table for uniqueness (no duplicates).


SELECT *

FROM invoices

WHERE Total > 2;

SELECT column1, column2, columnN

FROM table_name

WHERE [condition1] AND [condition2]...AND [conditionN];


SELECT *

FROM invoices

WHERE Total > 2 AND BillingCountry = 'USA';

SELECT column1, column2, columnN

FROM table_name

WHERE [condition1] OR [condition2]...OR [conditionN]

SELECT *

FROM invoices

WHERE BillingCountry = 'USA' OR BillingCountry='France';

SELECT *

FROM invoices

WHERE Total > 2 AND (BillingCountry = 'USA' OR BillingCountry = 'France');
